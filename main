#include <stdio.h>
#include <stdlib.h>
#include <SDL2/SDL.h>

const int SCREEN_WIDTH = 512;
const int SCREEN_HEIGHT = 512;

SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;

const int maxX = 1024;
const int minX = 0;
const int maxY = 1024;
const int minY = 0;

int score1 = 0;
int score2 = 0;

int ballX = 100;
int ballY = 500;
int ballXvelo = 1;
int ballYvelo = 1;

int bumper1Y = 512;
int bumper1X = 96;
int bumperSize = 176;
int bumper2Y = 512;
int bumper2X = 936;

int main(int argc, char* args[])
{
	//initialize SDL video, window, and renderer

	if (SDL_Init(SDL_INIT_VIDEO) < 0)
	{
		printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
		exit(1);
	}
	SDL_CreateWindowAndRenderer(SCREEN_WIDTH, SCREEN_HEIGHT, 0, &window, &renderer);
	if (window == NULL)
	{
		printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
	}
	SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);



	//main loop
	printf("start \n");
	for (; ; ) {
		ballX += ballXvelo;
		ballY += ballYvelo;
		checkBumper();
		checkToScore();
		checkYbound();
		printf("Y: %d", ballY);
		printf(" X: %d\r", ballX);
		fflush(stdout);
		drawRectangles();
		SDL_Delay(2);
	}
	atexit(SDL_Quit);

	return 0;
}

int bounce(int velo)
{
	return -velo;
}

void drawRectangles()
{
	//convert internal distance units to equivalent screen placements
	SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
	SDL_RenderClear(renderer);
	SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
	SDL_Rect ballRect = { ballX / 2, ballY / 2, 10, 10 };
	SDL_Rect bumper1Rect = { (bumper1X / 2) - 10, bumper1Y / 2, 10, bumperSize / 2 };
	SDL_Rect bumper2Rect = { (bumper2X / 2), bumper2Y / 2, 10, bumperSize / 2 };
	SDL_RenderFillRect(renderer, &ballRect);
	SDL_RenderFillRect(renderer, &bumper1Rect);
	SDL_RenderFillRect(renderer, &bumper2Rect);
	SDL_RenderPresent(renderer);
}

int checkToScore()
{
	if (ballX >= maxX)
	{
		score1++;
		printf("p1 score\n");
		ballX = 512;
		ballY = rand() % 1024;
		sleep(1);
		return 0;
	}
	if (ballX <= minX)
	{
		score2++;
		printf("p2 score\n");
		sleep(1);
		ballX = 512;
		ballY = rand() % 1024;
		return 0;
	}
	if (score1 >= 3 || score2 >= 3)
	{
		printf("\n Game Set! p1: %d, p2: %d \n", score1, score2);
		SDL_DestroyWindow(window);
		SDL_Quit();

		exit(EXIT_SUCCESS);
	}
	return 0;
}

int checkYbound()
{
	if (ballY > maxY || ballY < minY)
	{
		ballYvelo = bounce(ballYvelo);
	}
	return 0;
}

int checkBumper()
{
	/* detect collision when called, conditionally
	 call bounce with the degree of deflection
	as argument */

	if (ballX == bumper1X && (ballY > bumper1Y && ballY < bumper1Y + bumperSize))
	{
		ballXvelo = bounce(ballXvelo);
		return 0;
	}
	if (ballX == bumper2X && (ballY > bumper2Y && ballY < bumper2Y + bumperSize))
	{
		ballXvelo = bounce(ballXvelo);
		return 0;
	}
	return 0;
}
